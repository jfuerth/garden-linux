// This file was generated by counterfeiter
package fake_subnet_pool

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/container_pool"
	"github.com/cloudfoundry-incubator/garden-linux/old/linux_backend"
)

type FakeSubnetPool struct {
	AcquireStub        func(networkRequest string) (*linux_backend.Network, error)
	acquireMutex       sync.RWMutex
	acquireArgsForCall []struct {
		networkRequest string
	}
	acquireReturns struct {
		result1 *linux_backend.Network
		result2 error
	}
	ReleaseStub        func(*linux_backend.Network) error
	releaseMutex       sync.RWMutex
	releaseArgsForCall []struct {
		arg1 *linux_backend.Network
	}
	releaseReturns struct {
		result1 error
	}
	RemoveStub        func(*linux_backend.Network) error
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		arg1 *linux_backend.Network
	}
	removeReturns struct {
		result1 error
	}
}

func (fake *FakeSubnetPool) Acquire(networkRequest string) (*linux_backend.Network, error) {
	fake.acquireMutex.Lock()
	fake.acquireArgsForCall = append(fake.acquireArgsForCall, struct {
		networkRequest string
	}{networkRequest})
	fake.acquireMutex.Unlock()
	if fake.AcquireStub != nil {
		return fake.AcquireStub(networkRequest)
	} else {
		return fake.acquireReturns.result1, fake.acquireReturns.result2
	}
}

func (fake *FakeSubnetPool) AcquireCallCount() int {
	fake.acquireMutex.RLock()
	defer fake.acquireMutex.RUnlock()
	return len(fake.acquireArgsForCall)
}

func (fake *FakeSubnetPool) AcquireArgsForCall(i int) string {
	fake.acquireMutex.RLock()
	defer fake.acquireMutex.RUnlock()
	return fake.acquireArgsForCall[i].networkRequest
}

func (fake *FakeSubnetPool) AcquireReturns(result1 *linux_backend.Network, result2 error) {
	fake.AcquireStub = nil
	fake.acquireReturns = struct {
		result1 *linux_backend.Network
		result2 error
	}{result1, result2}
}

func (fake *FakeSubnetPool) Release(arg1 *linux_backend.Network) error {
	fake.releaseMutex.Lock()
	fake.releaseArgsForCall = append(fake.releaseArgsForCall, struct {
		arg1 *linux_backend.Network
	}{arg1})
	fake.releaseMutex.Unlock()
	if fake.ReleaseStub != nil {
		return fake.ReleaseStub(arg1)
	} else {
		return fake.releaseReturns.result1
	}
}

func (fake *FakeSubnetPool) ReleaseCallCount() int {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	return len(fake.releaseArgsForCall)
}

func (fake *FakeSubnetPool) ReleaseArgsForCall(i int) *linux_backend.Network {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	return fake.releaseArgsForCall[i].arg1
}

func (fake *FakeSubnetPool) ReleaseReturns(result1 error) {
	fake.ReleaseStub = nil
	fake.releaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSubnetPool) Remove(arg1 *linux_backend.Network) error {
	fake.removeMutex.Lock()
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		arg1 *linux_backend.Network
	}{arg1})
	fake.removeMutex.Unlock()
	if fake.RemoveStub != nil {
		return fake.RemoveStub(arg1)
	} else {
		return fake.removeReturns.result1
	}
}

func (fake *FakeSubnetPool) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *FakeSubnetPool) RemoveArgsForCall(i int) *linux_backend.Network {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return fake.removeArgsForCall[i].arg1
}

func (fake *FakeSubnetPool) RemoveReturns(result1 error) {
	fake.RemoveStub = nil
	fake.removeReturns = struct {
		result1 error
	}{result1}
}

var _ container_pool.SubnetPool = new(FakeSubnetPool)
